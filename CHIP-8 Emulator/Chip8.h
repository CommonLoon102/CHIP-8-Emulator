#pragma once

#include "Audio.h"
#include "Input.h"
#include "SDL.h"
#include "Types.h"

#include <fstream>
#include <iostream>


class Chip8
{
public:
	Chip8();
	~Chip8();

	Input* input = nullptr; // is shared with the Emulator class

	bool drawFlag;
	bool gfx[64 * 32];
	bool running;

	void EmulateCycle();
	void Reset(bool resetMemory);
	bool LoadRom(const char* file);
	void SetKey(u8 _key, bool active);
	void LoadState(std::ifstream& ifs);
	void SaveState(std::ofstream& ofs);
	void UpdateTimers();
	bool audioPlayIsPending();

private:
	bool delayTimerUpdated;
	bool soundTimerUpdated;
	u8 delayTimer;
	u8 soundTimer;
	u8 key[16];
	u8 memory[4096];
	u8 V[16]; // registers
	u16 I; // index register
	u16 pc; // program counter
	u16 sp; // stack pointer
	u16 stack[16];

	const u8 fontset[5 * 16] =
	{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	};

	void DecodeOpcode(u16 opcode);
};

